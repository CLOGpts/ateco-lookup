"Ciao, il mio backend Python su Render estrae solo 4 campi dalle visure camerali PDF.
  Ho bisogno che estragga TUTTI i campi importanti, soprattutto:
  - Denominazione azienda
  - Partita IVA
  - PEC
  - REA
  - Capitale sociale

  Ti allego:
  1. comunicazioni.txt - con il TODO e cosa manca
  2. BACKEND_POWER_UPGRADE.py - con il codice completo da integrare

  Puoi aiutarmi a integrare questo codice nel mio backend FastAPI esistente?
  Il backend attualmente usa pdfplumber ma trova solo ATECO e sede.
  Vorrei che usasse i regex potenti del file BACKEND_POWER_UPGRADE.py"

  🎯 RISULTATO ATTESO:

  Il Claude del backend dovrebbe:
  1. Prendere la classe VisuraExtractorPower dal file
  2. Integrarla nel tuo endpoint FastAPI esistente
  3. Sostituire il metodo di estrazione attuale
  4. Testare che restituisca tutti i campi

  ⚠️ IMPORTANTE:

  Digli anche che il frontend si aspetta questa struttura:
  {
    "success": true,
    "data": {
      "denominazione": "CELERYA SRL",
      "partita_iva": "12230960010",
      "pec": "celerya@pec.it",
      "codici_ateco": [...],
      "sede_legale": {...},
      // altri campi...
    }
  }

  Così il backend nuovo sarà compatibile con il frontend che abbiamo già sistemato!

# 📋 TODO - RENDERE IL BACKEND UNA POTENZA

## 🔴 PRIORITÀ MASSIMA - Backend Python

1. **Integrare il nuovo estrattore potente** (`BACKEND_POWER_UPGRADE.py`)
   - Sostituire il codice attuale di estrazione PDF
   - Aggiungere tutti i pattern regex per trovare i campi
   - Testare con diverse visure camerali

2. **Campi che il backend DEVE estrarre:**
   - ✅ Denominazione/Ragione sociale (CELERYA SRL)
   - ✅ Partita IVA (12230960010) 
   - ✅ PEC (celerya@pec.it)
   - ✅ Codice Fiscale
   - ✅ Numero REA (TO-1275874)
   - ✅ Forma giuridica (SRL, SPA, etc)
   - ✅ Capitale sociale versato (€11.077,42)
   - ✅ ATECO con descrizioni complete
   - ✅ Sede legale completa
   - ✅ Amministratori e cariche

## 🟡 MIGLIORAMENTI FRONTEND

3. **Ottimizzare il flusso di estrazione:**
   - Se il backend estrae tutti i dati → NON usare AI
   - Se mancano dati critici → Fallback su AI
   - Mostrare chiaramente quale metodo ha estratto i dati

4. **Visualizzazione dati estratti:**
   - Mostrare tutti i 30+ campi nel pannello laterale
   - Indicatori visuali per campi mancanti
   - Export dei dati in formato JSON/PDF

## 🟢 TESTING E VALIDAZIONE

5. **Test con diverse visure:**
   - Visure di diverse Camere di Commercio
   - Visure con formati diversi
   - Visure incomplete o parziali

6. **Metriche di successo:**
   - Backend deve estrarre almeno 80% dei campi
   - Tempo estrazione < 2 secondi
   - Confidence score > 0.8

## 📊 SITUAZIONE ATTUALE

**Backend estrae solo:**
- ATECO con descrizione ✅
- Sede legale ✅  
- Oggetto sociale ✅
- Tipo business ✅

**Backend NON estrae (e deve usare AI):**
- Denominazione ❌
- Partita IVA ❌
- PEC ❌
- REA ❌
- Capitale sociale ❌
- Forma giuridica ❌

## 🚀 OBIETTIVO FINALE

Backend Python deve estrarre TUTTI i dati senza bisogno dell'AI, risparmiando:
- Costi API Gemini
- Tempo di elaborazione
- Complessità del sistema

Il file `BACKEND_POWER_UPGRADE.py` contiene tutto il codice necessario per rendere il backend una potenza!